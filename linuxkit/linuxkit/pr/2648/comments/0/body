When writing a moby yml I do not care about the container version and hashes (only if I specifically want to stay with a version) and would like to simplify the process of writing them. I also do not want to keep track of all pkg version I use downstream and update them manually when something changes upstream.

The idea is to optionally split the moby config into 1 mutable and n immutable versions. The mutable version describes the desired state which uses image names like ```linuxkit/containerd:mutable```(or the usual hash tags for pinning down on a version), while the immutable configs stay like currently and get created on demand or mutation from a specifc pkg git repo. They can be versioned and stored in the end. 

Therefore ```linuxkit pkg collect --pkgroot /path/to/repo/linuxkit mutable.yml ``` first collects which container in the mutable yml are tagged mutable and then walks recursivly through pkgroot and looks for  ```build.yml```of a package with the same image name.  When found it calculates and stores the package hash (Not sure about error case). At this Point we could compare with the last hash of the image and implement build and push on change. At the end a yml with the hashes gets written versioned into a specific dir near the mutable yml and persist as an Artifact for a possible build.

This could also be used for CI that triggers ```linuxkit pkg collect --push``` on every pull for every mutable image yml. Would need to save the immutable artifacts somewhere.

The big disadvantage is that you probably dont want moby as dependency in linuxkit which is needed to parse the moby config (On the other side the linuxkit git pkg for the hashes is private). Let me know what you think about it!

(Im just getting used to go, so its a bit messy and uncomplete yet)