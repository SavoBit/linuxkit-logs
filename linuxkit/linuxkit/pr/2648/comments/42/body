> you shouldn't need to add anything to pkglib. This is a new top level command which doesn't operate in packages at all. Maybe pkglib needs extending, but a quick look suggests it may have all the interfaces needed.

That was the main reason i ended up with `linuxkit pkg collect` in the beginning; the git methods are not public but i actually would like to replace them with something like https://github.com/src-d/go-git . Is it possible to build a pkg which tree is not part of HEAD atm? Basically pkg/init with some old hash? This should be possible and there is `linuxkit pkg build -hash-commit` but i does seem to make something different.

> I don't understand why you need to walk directories in the code. If the template contains linuxkit/foo:<latest> and you pass in linuxkit:~/src/linuxkit/linuxkit/pkg you can just do the equivalent of linuxkit pkg show-tag ~/src/linuxkit/linuxkit/pkg/foo to get the tag. No need to walk directories etc.

I only did this so that its as flexible as possible in the beginning but ill implemented a fixed sheme like `./*/build.yml` relative to the pkgroot.
> Does your current implementation take multiple templates as argument, like linuxkit generate ... foo.template.yml bar.template.yml? This might be quite nice to have, but can be added later.

yes [move moby config cli parsing from pkg build to util](https://github.com/linuxkit/linuxkit/pull/2648/commits/bceca7732183ef5b26911c372278890b0cb5c15a) moves the build parsing to util so that it can be reused by `linuxkit generate`

> what if I push a literal linuxkit/foo:<x.y.z> to hub and want to use it? Are <> valid in that context

<> are not valid as docker image tag name.


Things actually get interesting with #2817, with a tag like this:
```
tags:
  - name: <dev>
    hash: <latest>
    config:
      build_args:
        kubernetes_repo_url: $KUBERNETES_REPO
```

Where $KUBERNETES_REPO is a keyvalue from either global conf or from cli parsing.