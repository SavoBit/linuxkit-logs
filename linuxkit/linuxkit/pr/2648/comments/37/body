@w9n thanks for the quick change, I have a few comments on the implementation itself, but before you spent more time on this it might be good to hear from @ijc and @justincormack what they think of the current proposal (we had quite a few discussions in the past on similar approaches with different views).

So the current proposal is to have a `foo.template.yml` which does not have all the tags present and then a new `linuxkit build` command which takes a list of prefixes and package directories and generates a `foo.yml` from it. So you can do something like:
```
linuxkit generate --pkgdir linuxkit:~/src/linuxkit/linuxkit/pkg --pkgdir linuxkit:~/src/linuxkit/kubernetes/pkg foo.template.yml > foo.yml
```
This would substitute any `<latest>` tags in `foo.template.yml` with the current hashes.

@ijc @justincormack what's your view on this proposal. I quite like it.

@w9n a few notes on the current implementation:
- you shouldn't need to add anything to `pkglib`. This is a new top level command which doesn't operate in packages at all. Maybe `pkglib` needs extending, but a quick look suggests it may have all the interfaces needed.
- I don't understand why you need to walk directories in the code. If the template contains `linuxkit/foo:<latest>` and you pass in `linuxkit:~/src/linuxkit/linuxkit/pkg` you can just do the equivalent of `linuxkit pkg show-tag ~/src/linuxkit/linuxkit/pkg/foo` to get the tag. No need to walk directories etc.
- Does your current implementation take multiple templates as argument, like `linuxkit generate ... foo.template.yml bar.template.yml`? This might be quite nice to have, but can be added later.