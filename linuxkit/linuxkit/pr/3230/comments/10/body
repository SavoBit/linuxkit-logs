Ok, I took a few laps testing this today, and have some suggestions --

```diff
diff --git a/pkg/bpftrace/Dockerfile b/pkg/bpftrace/Dockerfile
index 207345449..88c409cd1 100644
--- a/pkg/bpftrace/Dockerfile
+++ b/pkg/bpftrace/Dockerfile
@@ -27,11 +27,15 @@ RUN git clone ${GITREPO} /bpftrace \
     && cd /bpftrace/ \ 
     && mkdir -p /bpftrace/build \
     && git checkout ${COMMIT} \
-    && chmod +x /bpftrace/docker/build.sh \
-    && /bpftrace/docker/build.sh /bpftrace/build Release
+    && cd /bpftrace/build \
+    && export MAKEFLAGS=-j$(nproc) \
+    && cmake -DCMAKE_BUILD_TYPE="Release" -DSTATIC_LINKING:BOOL=ON -DRUN_TESTS=0 -DCMAKE_INSTALL_PREFIX=/usr ../ \
+    && make -j$(nproc) \
+    && DESTDIR=/out make install \
+    && chmod +x /out/usr/share/bpftrace/tools/*.bt
 
 FROM scratch
 WORKDIR /
-COPY --from=build /bpftrace/build/src/bpftrace /bpftrace
-ENTRYPOINT [ "/bpftrace" ]
-CMD ["/bpftrace", "-h"]
\ No newline at end of file
+COPY --from=build /out/ /
+ENTRYPOINT [ "/usr/bin/bpftrace" ]
+CMD ["/usr/bin/bpftrace", "-h"]
```

Essentially this just implements the `build.sh` inline to be able to pass more flags to `cmake` than what is currently available [there may be a more elegant `cmake` approach for this]. The key here, is we're setting the prefix to `/usr` so the tools look in more accurate platform locations for things, like `/usr/include` etc etc, also it uses `make install DESTDIR=/out` which allows us to ship the tools that are shipped with `bpftrace` as well.

As a result, you can either `nsenter -t1 -a -- bpftrace` or `export PATH=$PATH:/proc/1/root/usr/bin` though the latter is slightly "dangerous", assuming it is on your `$PATH` though, you can use the tools by either copying them into `getty`/`ssh` from the root namespace, or using them in place `/proc/1/root/usr/share/bpftrace/tools/pidpersec.bt`

also, using an image like

```yml
kernel:
  image: linuxkit/kernel:4.14.81
  cmdline: "console=tty0 console=ttyS0 console=ttyAMA0 console=ttysclp0"
init:
  - linuxkit/init:c563953a2277eb73a89d89f70e4b6dcdcfebc2d1
  - linuxkit/runc:83d0edb4552b1a5df1f0976f05f442829eac38fe
  - linuxkit/containerd:326b096cd5fbab0f864e52721d036cade67599d6
  - linuxkit/ca-certificates:v0.6
  - linuxkit/bpftrace:1a2cc3766bf1f12090a3f8ea584d141f0ec860c0-dirty
  - linuxkit/kernel:4.14.81
onboot:
  - name: sysctl
    image: linuxkit/sysctl:v0.6
  - name: dhcpcd
    image: linuxkit/dhcpcd:v0.6
    command: ["/sbin/dhcpcd", "--nobackground", "-f", "/dhcpcd.conf", "-1"]
services:
  - name: getty
    image: linuxkit/getty:2eb742cd7a68e14cf50577c02f30147bc406e478
    env:
     - INSECURE=true
  - name: rngd
    image: linuxkit/rngd:v0.6
trust:
  org:
    - linuxkit
```

You're able to `tar xf /proc/1/root/kernel-headers.tar` such that you can avoid `bpftrace`'s invocation of `clang` from failing, and it can be in sync with the kernel version you're running.

These are just some suggestions, I'll file some tickets with `bpftrace` directly regarding some of the pitfalls of their implementation, but that's outside the scope of this PR.