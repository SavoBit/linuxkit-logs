Hah, I was thinking about doing something like this as well.

Looks like you went for:
```
.
├── cmd
│   └── linuxkit
│       ├── azure.go
│       ├── build.go
│       ├── gcp.go
│       ├── hyperv_fallback.go
│       ├── hyperv_windows.go
│       ├── main.go
│       ├── metadata.go
│       ├── pkg.go
│       ├── pkg_build.go
│       ├── pkg_push.go
│       ├── pkg_showtag.go
│       ├── pkglib
│       │   ├── build.go
│       │   ├── depends.go
│       │   ├── docker.go
│       │   ├── gen
│       │   ├── git.go
│       │   ├── manifest_push_script.go
│       │   ├── pkglib.go
│       │   └── pkglib_test.go
│       ├── push.go
│       ├── push_aws.go
│       ├── push_azure.go
│       ├── push_gcp.go
│       ├── push_openstack.go
│       ├── push_packet.go
│       ├── push_scaleway.go
│       ├── push_vcenter.go
│       ├── run.go
│       ├── run_aws.go
│       ├── run_azure.go
│       ├── run_gcp.go
│       ├── run_hyperkit.go
│       ├── run_hyperv.go
│       ├── run_openstack.go
│       ├── run_packet.go
│       ├── run_qemu.go
│       ├── run_scaleway.go
│       ├── run_vbox.go
│       ├── run_vcenter.go
│       ├── run_vmware.go
│       ├── scaleway.go
│       ├── serve.go
│       ├── util.go
│       └── version
│           └── version.go
├── initrd
│   └── initrd.go
├── moby
│   ├── build.go
│   ├── config.go
│   ├── config_test.go
│   ├── docker.go
│   ├── image.go
│   ├── linuxkit.go
│   ├── output.go
│   ├── schema.go
│   ├── trust.go
│   ├── trust_test.go
│   ├── util.go
│   ├── util_unix.go
│   └── util_windows.go
├── pad4
│   └── pad4.go
├── vendor
....
└── vendor.conf
```
as the directory layout.

would it make more sense to have a layout like:
```
src/cmd/linuxkit
src/pkg/initrd
src/pkg/pad4
src/pkg/moby
...
vendor/
```

We can then later rename `src/pkg/moby` to something like `src/pkg/build` and also move the `src/cmd/linuxkit/pkglib` and consolidate the two different interfaces to `docker` etc.

Would we still have a standalone `moby` tool or shall we just roll that into `linuxkit`?

We would also move the issues from `moby/tool` to `linuxkit/linuxkit` somehow
